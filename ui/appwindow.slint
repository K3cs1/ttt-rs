import { Button, VerticalBox, GridBox } from "std-widgets.slint";

struct Sequence {
    id: int,
    player: string}

struct TileData {
    id: int,
    win_color: brush,
    human_clicked: bool,
    machine_clicked: bool,
    empty: bool}

component TicTacToeTile inherits Rectangle {
    in property <int> id;
    in property <image> human_icon;
    in property <image> machine_icon;
    in-out property <bool> human_clicked;
    in-out property <bool> machine_clicked;
    in-out property <bool> empty;
    in-out property <brush> win_color;
    callback human_selected(int);
    Rectangle {
        background: root.win_color;
        Image {
            visible: !root.empty && root.human_clicked;
            source: root.human_icon;
            width: parent.width - 16px;
            height: parent.height - 16px;
            x: parent.x + 10px;
            y: parent.y + 10px;
        }

        Image {
            visible: !root.empty && root.machine_clicked;
            source: root.machine_icon;
            width: parent.width - 16px;
            height: parent.height - 16px;
            x: parent.x + 10px;
            y: parent.y + 10px;
        }

        TouchArea {
            clicked => {
                root.human_selected(id);
            }
            width: 100%;
            height: 100%;
        }
    }
}

export component AppWindow inherits Window {
    private property <length> tile-size: 100px;
    private property <length> tile-spacing: 10px;
    private property <int> row-count: 3;
    private property <int> column-count: 3;
    private property <image> human_icon: @image-url("icons/o.png");
    private property <image> machine_icon: @image-url("icons/x.png");
    callback process(int);
    callback restart_game();
    callback exit();
    width: (root.column-count * root.tile-size) + ((root.column-count + 1) * root.tile-spacing);
    height: (root.row-count * root.tile-size) + ((root.row-count + 1) * root.tile-spacing) + 60px;
    title: "Tic-Tac-Toe Game";
    in-out property <[TileData]> ttt_tiles: [
        {
            id: 0,
            win_color: Colors.yellow,
            human_clicked: false,
            machine_clicked: false,
            empty: true
        },
        {
            id: 1,
            win_color: Colors.yellow,
            human_clicked: false,
            machine_clicked: false,
            empty: true
        },
        {
            id: 2,
            win_color: Colors.yellow,
            human_clicked: false,
            machine_clicked: false,
            empty: true
        },
        {
            id: 3,
            win_color: Colors.yellow,
            human_clicked: false,
            machine_clicked: false,
            empty: true
        },
        {
            id: 4,
            win_color: Colors.yellow,
            human_clicked: false,
            machine_clicked: false,
            empty: true
        },
        {
            id: 5,
            win_color: Colors.yellow,
            human_clicked: false,
            machine_clicked: false,
            empty: true
        },
        {
            id: 6,
            win_color: Colors.yellow,
            human_clicked: false,
            machine_clicked: false,
            empty: true
        },
        {
            id: 7,
            win_color: Colors.yellow,
            human_clicked: false,
            machine_clicked: false,
            empty: true
        },
        {
            id: 8,
            win_color: Colors.yellow,
            human_clicked: false,
            machine_clicked: false,
            empty: true
        }
    ];
    in-out property <[Sequence]> sequence: [];
    for tile[i] in ttt_tiles: TicTacToeTile {
        human_selected(id) => {
            if (tile.empty) {
                process(id);
            }
        }
        id: i;
        x: root.tile-spacing + mod(i, root.column-count) * (root.tile-size + root.tile-spacing);
        y: root.tile-spacing + floor(i / root.row-count) * (root.tile-size + root.tile-spacing);
        width: root.tile-size;
        height: root.tile-size;
        human_icon: root.human_icon;
        machine_icon: root.machine_icon;
        human_clicked: tile.human_clicked;
        machine_clicked: tile.machine_clicked;
        empty: tile.empty;
        win_color: tile.win-color;
    }
    Rectangle {
        padding: 10px;
        x: root.x;
        y: 340px;
        width: root.width - 10px;
        height: root.height - 10px;
        GridLayout {
            padding-left: 10px;
            Row {
                Button {
                    width: 100px;
                    height: 40px;
                    text: "Restart";
                    primary: true;
                    clicked => {
                        restart_game()
                    }
                }

                // Button {
                //     width: 100px;
                //     height: 40px;
                //     padding-left: 10px;
                //     text: "Exit";
                //     clicked => {
                //         exit()
                //     }
                // }
            }
        }
    }
}
